# %%
import streamlit as st
import pandas as pd
from io import BytesIO


#%%

st.set_page_config(
    page_title="Guia das Federais - Encontre seu curso numa universidade federal",
    layout="wide",
 )
# %%
# Fun√ß√£o para carregar os dados do CSV da pos-graduacao
@st.cache_data  # Cache para melhorar a performance
def load_data_mestrado_doutorado(csv_file):
    df = pd.read_csv(csv_file,sep='\t',index_col=None)
    
    
    colunas_novas = {
    'Sigla da Institui√ß√£o de Ensino Superior do programa de p√≥s-gradua√ß√£o': 'Sigla_IES',
    'Nome do programa de p√≥s-gradua√ß√£o': 'Nome_Programa',
    '√Årea de conhecimento do programa de p√≥s-gradua√ß√£o': 'Area_Conhecimento',
    'Sigla da Unidade da Federa√ß√£o do programa': 'UF',
    'Munic√≠pio sede do programa de p√≥s-gradua√ß√£o': 'Municipio',
    'Modalidade do programa de p√≥s-gradua√ß√£o': 'Modalidade',
    'N√≠vel do programa de p√≥s-gradua√ß√£o': 'Nivel_Programa',
    'Nota/Conceito do programa de p√≥s-gradua√ß√£o': 'Nota_Conceito',
    'Institui√ß√£o de Ensino Superior do programa de p√≥s-gradua√ß√£o': 'Nome_IES'
    }
    df.rename(columns=colunas_novas, inplace=True)
    df['Nota_Conceito'].fillna("N√£o informado", inplace=True)
    df['Nota_Conceito'] = df['Nota_Conceito'].astype(str)

    return df
#%%

# Fun√ß√£o para carregar os dados do CSV da pos-graduacao
@st.cache_data  # Cache para melhorar a performance
def load_data_graduacao(csv_file):
    df = pd.read_csv(csv_file, sep='\t', index_col=None)
    
    # Novo mapeamento de colunas
    colunas_novas = {
        'Nome da IES': 'Nome_IES',
        'Nome do curso': 'Nome_Curso',
        'Grau': 'Grau',
        '√Årea OCDE': 'Area_Conhecimento',
        'Modalidade de ensino (presencial ou EaD)': 'Modalidade_Ensino',
        'Munic√≠pio': 'Municipio',
        'UF': 'UF',
        }
    
    df.rename(columns=colunas_novas, inplace=True)

    # Voc√™ pode adicionar aqui qualquer outra opera√ß√£o que deseje realizar no DataFrame
    # Por exemplo, tratar colunas com valores nulos, converter tipos de dados, etc.

    return df

@st.cache_data  # Cache para melhorar a performance
def load_data_especializacao(csv_file):
    df = pd.read_csv(csv_file, sep='\t', index_col=None)
    return df


#%%
def convert_df_to_csv(df):
    return df.to_csv(index=False).encode('utf-8')

# %%
# Carregar os dados
data_mestrado_doutorado = load_data_mestrado_doutorado('mestrado_doutorado_univ_publicas.csv')
data_graduacao = load_data_graduacao('graduacao_univ_publicas.csv')
data_especializacao = load_data_especializacao('especializacao_univ_publicas.csv')



# %%
def show_especializacao():
    st.caption("""üîç **Escolha os filtros que preferir** e veja os resultados na tabela no final da p√°gina.    
    üí° **Dica:** Voc√™ pode deixar todos os filtros em branco se quiser ver todos os dados üåê
""")

    col_area, col_modalidade = st.columns(2)
    with col_area:
        # Primeira camada de filtro: √Årea de Conhecimento
        areas_conhecimento = st.multiselect('√Årea de conhecimento especializacao', 
                                            sorted(data_especializacao['Area_Conhecimento'].unique()), 
                                            default=[])
        df_filtrado = data_especializacao[data_especializacao['Area_Conhecimento'].isin(areas_conhecimento)] if areas_conhecimento else data_especializacao
    with col_modalidade:
        # Segunda camada de filtro: Modalidade de Ensino
        modalidade = st.multiselect('Modalidade de ensino', 
                                sorted(df_filtrado['MODALIDADE'].unique()), 
                                default=[])
        df_filtrado = df_filtrado[df_filtrado['MODALIDADE'].isin(modalidade)] if modalidade else df_filtrado

    col_nome_ies, col_nome_especializacao = st.columns(2)
    with col_nome_ies:
        # Terceira camada de filtro: Nome da Institui√ß√£o
        nome_ies = st.multiselect('Nome da Institui√ß√£o', 
                                sorted(df_filtrado['NOME_IES'].unique()), 
                                default=[])
        df_filtrado = df_filtrado[df_filtrado['NOME_IES'].isin(nome_ies)] if nome_ies else df_filtrado
    with col_nome_especializacao:
        # Quarta camada de filtro: Nome do Curso de Especializa√ß√£o
        nome_especializacao = st.multiselect('Nome do Curso de Especializa√ß√£o', 
                                            sorted(df_filtrado['NOME_ESPECIALIZACAO'].unique()), 
                                            default=[])
        df_filtrado = df_filtrado[df_filtrado['NOME_ESPECIALIZACAO'].isin(nome_especializacao)] if nome_especializacao else df_filtrado

    col_carga_horaria, col_duracao = st.columns(2)
    
    with col_carga_horaria:
    # Quinta camada de filtro: Carga Hor√°ria
        if not df_filtrado.empty:
            min_carga_horaria, max_carga_horaria = min(df_filtrado['CARGA_HORARIA']), max(df_filtrado['CARGA_HORARIA'])
            if min_carga_horaria < max_carga_horaria:  # S√≥ mostra o slider se houver um intervalo v√°lido
                carga_horaria = st.slider('Carga Hor√°ria', 
                                        min_carga_horaria, max_carga_horaria, 
                                        (min_carga_horaria, max_carga_horaria), step=30)
                df_filtrado = df_filtrado[(df_filtrado['CARGA_HORARIA'] >= carga_horaria[0]) & (df_filtrado['CARGA_HORARIA'] <= carga_horaria[1])]
            else:
                st.warning("Ocultamos o filtro de Carga Hor√°ria nesse momento.")

    with col_duracao:
    # Sexta camada de filtro: Dura√ß√£o em Meses
        if not df_filtrado.empty:
            min_duracao_meses, max_duracao_meses = min(df_filtrado['DURACAO_MESES']), max(df_filtrado['DURACAO_MESES'])
            if min_duracao_meses < max_duracao_meses:  # S√≥ mostra o slider se houver um intervalo v√°lido
                duracao_meses = st.slider('Dura√ß√£o em Meses', 
                                        min_duracao_meses, max_duracao_meses, 
                                        (min_duracao_meses, max_duracao_meses), step=6)
                df_filtrado = df_filtrado[(df_filtrado['DURACAO_MESES'] >= duracao_meses[0]) & (df_filtrado['DURACAO_MESES'] <= duracao_meses[1])]
            else:
                st.warning("Ocultamos o filtro Dura√ß√£o em meses nesse momento.")

    col_municipio,col_estado = st.columns(2)
    with col_municipio:
        # S√©tima camada de filtro: Munic√≠pio
        municipio_especializacao = st.multiselect('Munic√≠pio', 
                                sorted(df_filtrado['MUNICIPIO'].unique()), 
                                default=[])
        df_filtrado = df_filtrado[df_filtrado['MUNICIPIO'].isin(municipio_especializacao)] if municipio_especializacao else df_filtrado

    with col_estado:
        # Oitava camada de filtro: Estado (UF)
        estado_especializacao = st.multiselect('Estado', 
                            sorted(df_filtrado['UF'].unique()), 
                            default=[])
        df_filtrado = df_filtrado[df_filtrado['UF'].isin(estado_especializacao)] if estado_especializacao else df_filtrado

    df_filtrado.reset_index(drop=True, inplace=True)

    st.caption(""" ---
    __Aten√ß√£o__: Se a tabela estiver muito pequena, voc√™ pode clicar no bot√£o de ampliar no canto superior ou baixar a tabela nos bot√µes abaixo""")
    # Aqui voc√™ pode adicionar a l√≥gica para exibir a tabela com base nas sele√ß√µes feitas.
    st.dataframe(df_filtrado[['NOME_ESPECIALIZACAO','NOME_IES','MUNICIPIO','UF','MODALIDADE','DURACAO_MESES','CARGA_HORARIA']])



    st.markdown(""" ---
    Utilize os bot√µes abaixo se desejar baixar os dados da tabela acima :red[(primeiro bot√£o)] ou baixar a base de dados orignal com todos os cursos de especializa√ß√£o das universidades p√∫blicas do Brasil :blue[(segundo bot√£o)]""")
    col_download1, col_download2 = st.columns(2)
    with col_download1:
        # Bot√£o para baixar dados filtrados
        if st.button('Planilha CSV dos dados dos cursos de especializacao', type="primary"):
            csv = convert_df_to_csv(df_filtrado)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Dados_filtrados_graduacao.csv', 
                            mime='text/csv')    
    with col_download2:
        # Bot√£o para baixar todos os dados
        if st.button('Planilha CSV com todas as especializa√ß√µes do Brasil', type="secondary"):
            csv = convert_df_to_csv(data_especializacao)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Todos_os_dados_graduacao.csv', 
                            mime='text/csv')

# Interface Mestrado e Doutorado
def show_mestrado_doutorado():
    
    st.caption("""üîç **Escolha os filtros que preferir** e veja os resultados na tabela no final da p√°gina.    
    üí° **Dica:** Voc√™ pode deixar todos os filtros em branco se quiser ver todos os dados üåê
""")
    col_niveis, col_area = st.columns(2)
    with col_niveis:
        # Sele√ß√£o m√∫ltipla para os n√≠veis de curso
        niveis = st.multiselect('N√≠vel (Mestrado, Doutorado, etc.)', 
                                sorted(data_mestrado_doutorado['Nivel_Programa'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de n√≠veis
        data_niveis = data_mestrado_doutorado if not niveis else data_mestrado_doutorado[data_mestrado_doutorado['Nivel_Programa'].isin(niveis)]

    with col_area:
        # Multiselect para √Årea de Conhecimento
        areas_conhecimento = st.multiselect('√Årea de conhecimento', 
                                            sorted(data_mestrado_doutorado['Area_Conhecimento'].unique()), 
                                            default=[])
        st.caption('__Aten√ß√£o aos servidores p√∫blicos:__ Observe se esta informa√ß√£o est√° alinhada com seu ambiente organizacional')
        # Filtrando dados com base na sele√ß√£o de √°reas de conhecimento
        data_areas = data_niveis if not areas_conhecimento else data_niveis[data_niveis['Area_Conhecimento'].isin(areas_conhecimento)]



    # Multiselect para as notas CAPES
    notas_capes = st.multiselect('Avalia√ß√£o CAPES', 
                                sorted(data_areas['Nota_Conceito'].unique()), 
                                default=[])
    data_notas = data_areas if not notas_capes else data_areas[data_areas['Nota_Conceito'].isin(notas_capes)]


    data_atual = data_notas

    col_estado, col_municipio = st.columns(2)
    with col_estado:
        # Multiselect para estados
        estados = st.multiselect('Estado da institui√ß√£o', 
                                sorted(data_atual['UF'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de estados
        data_estados = data_atual if not estados else data_atual[data_atual['UF'].isin(estados)]


    with col_municipio:
        # Condicionando a exibi√ß√£o de munic√≠pios com base nos estados selecionados
        if estados:
            municipios_opcoes = sorted(data_estados['Municipio'].unique())
        else:
            municipios_opcoes = sorted(data_atual['Municipio'].unique())

        # Multiselect para Munic√≠pio
        municipios = st.multiselect('Munic√≠pio', 
                                    municipios_opcoes, 
                                    default=[])
        # Filtrando dados com base na sele√ß√£o de munic√≠pios
        data_municipios = data_estados if not municipios else data_estados[data_estados['Municipio'].isin(municipios)]
   


    # Usando 'data_municipios' como base para os pr√≥ximos filtros
    data_atual = data_municipios

    col_sigla_ies, col_nome_ies = st.columns(2)
    with col_sigla_ies:
        # Multiselect para siglas das institui√ß√µes
        instituicoes = st.multiselect('Sigla da Institui√ß√£o', 
                                    sorted(data_atual['Sigla_IES'].unique()), 
                                    default=[])
        # Filtrando dados com base na sele√ß√£o de siglas
        data_sigla_ies = data_atual if not instituicoes else data_atual[data_atual['Sigla_IES'].isin(instituicoes)]

    with col_nome_ies:
        # Multiselect para nomes das institui√ß√µes
        nomes_ies = st.multiselect('Nome da Institui√ß√£o', 
                                sorted(data_atual['Nome_IES'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de nomes
        data_nome_ies = data_atual if not nomes_ies else data_atual[data_atual['Nome_IES'].isin(nomes_ies)]
    st.caption('Voc√™ pode selecionar as institui√ß√µes de seu interesse pela :blue[*_Sigla_*] pelo :red[*_Nome da Institui√ß√£o_*] ou pelos dois ao mesmo tempo.')

    # Combinando os filtros de Sigla e Nome da IES
    # Isso permite que ambos os filtros sejam aplicados em conjunto
    filtered_data = data_sigla_ies.merge(data_nome_ies, how='inner')

    # Ordenando os dados primeiro por Nome_Programa e depois por Sigla_IES, UF, Munic√≠pio e Modalidade
    filtered_data_sorted = filtered_data.sort_values(by=['Nome_Programa', 'Sigla_IES', 'UF', 'Municipio', 'Modalidade'])
    filtered_data_sorted.reset_index(drop=True, inplace=True)


    
    st.caption(""" ---
    __Aten√ß√£o__: Se a tabela estiver muito pequena, voc√™ pode clicar no bot√£o de ampliar no canto superior ou baixar a tabela nos bot√µes abaixo""")
    # Exibindo a tabela com os resultados filtrados
    st.dataframe(filtered_data_sorted[['Nome_Programa', 'Sigla_IES', 'UF', 
                                    'Municipio', 'Area_Conhecimento', 'Nota_Conceito', 'Nivel_Programa',
                                    'Modalidade']])
    

    st.markdown(""" ---
    Utilize os bot√µes abaixo se desejar baixar os dados da tabela acima :red[(primeiro bot√£o)] ou baixar a base de dados orignal com todos os programas de mestrado e doutorado das universidades p√∫blicas do Brasil :blue[(segundo bot√£o)]""")
    col_download1, col_download2 = st.columns(2)
    with col_download1:
        # Bot√£o para baixar dados filtrados
        if st.button('Planilha CSV de todos os dados da tabela acima', type="primary"):
            csv = convert_df_to_csv(filtered_data_sorted)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Dados_filtrados.csv', 
                            mime='text/csv')    
    with col_download2:
        # Bot√£o para baixar todos os dados
        if st.button('Planilha CSV com todos os programas do Brasil', type="secondary"):
            csv = convert_df_to_csv(data_mestrado_doutorado)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Todos_os_dados.csv', 
                            mime='text/csv')
    
    


# Fun√ß√£o para exibir a mensagem de "Em Constru√ß√£o"
def show_graduacao():
    
    st.caption("""üîç **Escolha os filtros que preferir** e veja os resultados na tabela no final da p√°gina.    
    üí° **Dica:** Voc√™ pode deixar todos os filtros em branco se quiser ver todos os dados üåê
""")

    col_graus, col_modalidade = st.columns(2)
    with col_graus:
        # Sele√ß√£o m√∫ltipla para os n√≠veis de curso
        graus = st.multiselect('Tipos de gradua√ß√£o (Licenciatura, Bacharelado, etc.)', 
                                sorted(data_graduacao['Grau'].unique()), 
                                default=["Bacharelado","Licenciatura"])
        # Filtrando dados com base na sele√ß√£o de n√≠veis
        data_graus = data_graduacao if not graus else data_graduacao[data_graduacao['Grau'].isin(graus)]

    with col_modalidade:
        # Multiselect para Modalidade de ensino
        modalidade_ensino = st.multiselect('Modalidade de Ensino (Presencial ou EAD)', 
                                            sorted(data_graduacao['Modalidade_Ensino'].unique()), 
                                            default=["Educa√ß√£o Presencial"])
        # Filtrando dados com base na sele√ß√£o de √°reas de conhecimento
        data_modalidade = data_graus if not modalidade_ensino else data_graus[data_graus['Modalidade_Ensino'].isin(modalidade_ensino)]





    data_atual_graduacao = data_modalidade

    col_estado, col_municipio = st.columns(2)
    with col_estado:
        # Multiselect para estados
        estados = st.multiselect('Estado/UF', 
                                sorted(data_atual_graduacao['UF'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de estados
        data_estados = data_atual_graduacao if not estados else data_atual_graduacao[data_atual_graduacao['UF'].isin(estados)]


    with col_municipio:
        # Condicionando a exibi√ß√£o de munic√≠pios com base nos estados selecionados
        if estados:
            municipios_opcoes = sorted(data_estados['Municipio'].unique())
        else:
            municipios_opcoes = sorted(data_atual_graduacao['Municipio'].unique())

        # Multiselect para Munic√≠pio
        municipios = st.multiselect('Munic√≠pio da institui√ß√£o', 
                                    municipios_opcoes, 
                                    default=[])
        # Filtrando dados com base na sele√ß√£o de munic√≠pios
        data_municipios = data_estados if not municipios else data_estados[data_estados['Municipio'].isin(municipios)]


    # Usando 'data_municipios' como base para os pr√≥ximos filtros
    data_atual_graduacao = data_municipios


    col_nome_ies, col_curso_ies = st.columns(2)

    with col_nome_ies:
        # Multiselect para nomes das institui√ß√µes
        nomes_ies = st.multiselect('Nome da Institui√ß√£o', 
                                sorted(data_atual_graduacao['Nome_IES'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de nomes
        data_nome_ies = data_atual_graduacao if not nomes_ies else data_atual_graduacao[data_atual_graduacao['Nome_IES'].isin(nomes_ies)]
    
    with col_curso_ies:
        # Multiselect para nomes das institui√ß√µes
        curso_ies = st.multiselect('Curso', 
                                sorted(data_nome_ies['Nome_Curso'].unique()), 
                                default=[])
        # Filtrando dados com base na sele√ß√£o de nomes
        data_curso_ies = data_nome_ies if not curso_ies else data_nome_ies[data_nome_ies['Nome_Curso'].isin(curso_ies)]
    
    # Ordenando os dados primeiro por Nome_Programa e depois por Sigla_IES, UF, Munic√≠pio e Modalidade
    filtered_data_sorted = data_curso_ies.sort_values(by=['Nome_Curso', 'Nome_IES', 'UF', 'Municipio', 'Modalidade_Ensino'])
    filtered_data_sorted.reset_index(drop=True, inplace=True)




    st.caption(""" ---
    __Aten√ß√£o__: Se a tabela estiver muito pequena, voc√™ pode clicar no bot√£o de ampliar no canto superior ou baixar a tabela nos bot√µes abaixo""")
    # Exibindo a tabela com os resultados filtrados
    st.dataframe(filtered_data_sorted[['Nome_Curso', 'Nome_IES', 'UF', 
                                    'Municipio', 'Modalidade_Ensino','Grau','Area_Conhecimento' ]])
    

    st.markdown(""" ---
    Utilize os bot√µes abaixo se desejar baixar os dados da tabela acima :red[(primeiro bot√£o)] ou baixar a base de dados orignal com todos os cursos de gradua√ß√£o das universidades p√∫blicas do Brasil :blue[(segundo bot√£o)]""")
    col_download1, col_download2 = st.columns(2)
    with col_download1:
        # Bot√£o para baixar dados filtrados
        if st.button('Planilha CSV dos dados da tabela acima', type="primary"):
            csv = convert_df_to_csv(filtered_data_sorted)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Dados_filtrados_graduacao.csv', 
                            mime='text/csv')    
    with col_download2:
        # Bot√£o para baixar todos os dados
        if st.button('Planilha CSV com todos os cursos do Brasil', type="secondary"):
            csv = convert_df_to_csv(data_graduacao)
            st.download_button(label="Dados prontos para download. Clique aqui para baixar.", 
                            data=csv, 
                            file_name='Todos_os_dados_graduacao.csv', 
                            mime='text/csv')
    





def main():
    st.title('Guia das Federais')
    st.subheader('Encontre cursos de gradua√ß√£o, especializa√ß√£o, mestrado e doutorado das universidades p√∫blicas do Brasil num √∫nico lugar')

    # Cria√ß√£o de abas para Gradua√ß√£o e P√≥s-Gradua√ß√£o
    tab1, tab2, tab3 = st.tabs(["CURSOS DE GRADUA√á√ÉO","ESPECIALIZA√á√ÉO","MESTRADO E DOUTORADO"])

    with tab1:
        show_graduacao()
    with tab2:
        show_especializacao()
    with tab3:
        show_mestrado_doutorado()
    

    st.markdown(""" ---
    ### O que eu fa√ßo agora? üåüüöÄ

    Hey, explorador acad√™mico! üïµÔ∏è‚Äç‚ôÇÔ∏èüéì Voc√™ acabou de mergulhar num oceano de op√ß√µes incr√≠veis sobre gradua√ß√µes e p√≥s-gradua√ß√µes em universidades p√∫blicas brasileiras. Mas, pera√≠, voc√™ deve estar se perguntando: "E agora, o que eu fa√ßo com todas essas infos?" ü§î

    N√£o se preocupe, eu te guio nessa! üåà‚ú®

    1. **Google √© seu novo BFF!** üåêüëØ
    - Infelizmente, o MEC, apesar de ter disponibilizado os dados, n√£o nos deu links diretos. üòû
    - Mas isso n√£o √© um beco sem sa√≠da! Use o poderoso Google para buscar mais sobre os cursos que chamaram sua aten√ß√£o. Digite o nome da universidade e do curso e... Voil√†! Informa√ß√µes fresquinhas ao seu dispor.

    2. **Amantes de Planilhas, Uni-vos!** üìäüíª
    - Se voc√™ curte uma boa planilha (quem n√£o, n√©?), temos um present√£o! üéÅ
    - Voc√™ pode baixar **os dados que est√£o na tela** para uma an√°lise mais aprofundada. Quer ver todos os detalhes e fazer suas pr√≥prias tabelas coloridas? √â s√≥ clicar e baixar!
    - E se voc√™ √© daqueles que adora ter **toda a base de dados**, temos isso tamb√©m! Baixe a base completa e sinta-se como um cientista de dados descobrindo novos mundos.

    Ent√£o, √© isso! Mergulhe fundo nessa busca, jovem padawan! Que a for√ßa do conhecimento esteja com voc√™! üååüë©‚ÄçüöÄ

    Lembre-se: cada clique √© um passo em sua jornada acad√™mica. V√° em frente e descubra as maravilhas das universidades p√∫blicas do Brasil! üáßüá∑üéâ

    **Boa jornada!** üöÄüåü

    """)

    # Disclaimer/Avisos legais
    st.markdown(""" ---
    #### Disclaimer
    Apesar do esfor√ßo em disponibilizar informa√ß√µes de qualidade, podem haver erros, por isso utilize essas informa√ß√µes :red[por sua conta e risco]. N√£o s√£o oferecidas quaisquer garantias.

    Este site √© uma iniciativa volunt√°ria para facilitar o acesso a informa√ß√µes sobre cursos de gradua√ß√£o, especializa√ß√£o, mestrado e doutorado em universidades p√∫blicas brasileiras - federais, estaduais e municipais permitindo visualizar todas as op√ß√µes dispon√≠veis em um √∫nico lugar, sem a necessidade de buscas extensas e trabalhosas. As informa√ß√µes aqui disponibilizadas foram extra√≠das de fontes oficiais do governo, como o e-MEC e a Plataforma Sucupira.
    """)


    # Adicionar o email de contato
    st.markdown('**Desenvolvido por Erick C. Campos:** [erickcampos50@gmail.com](mailto:erickcampos50@gmail.com)')



# %%
if __name__ == '__main__':
    main()
